#Sensor Settings
#All temp sensors in the system will be polled. The highest temp from all sensors (where not on blocklist) will be used to determine the fan speed.

#Sensor Blocklist - exclude sensors from impacting fan speed control.
#hwmon.name should match a value in /sys/class/hwmon/hwmon*/name
#temp.label should match a value in /sys/class/hwmon/hwmon*/temp_label (where hwmon* is selected by 'hwmon.name' above)

#[blocklist-0]
#hwmon.name = nvme
#temp.label = Sensor 2

#Example for further blocklist entries:
#Create a new numbered blocklist section for each, e.g.:
#[blocklist-1]
#hwmon.name = k10temp
#temp.label = Tctl


[temp-settings]
#Temp Settings
#The ACPI contols allow for setting a fan speed as:
# level 0 = off
# level 1 = +- 1850 RPM
# level 2 = +- 2089 RPM
# level 3 = +- 2240 RPM
# level 4 = +- 2490 RPM
# level 5 = +- 2680 RPM
# level 6 = +- 3089 RPM
# level 7 = +- 3448 RPM
# level disengaged = 4760 RPM (max possible speed)
#There is a "pwm" controls also but they are not more fine-grained, and just index into the above brackets.
#The RPM for each bracket cannot be changed.

#Set a minimum temp, in degrees celcius, at which the fan should start, at level 1 speed.
#Only values [1..70] are accepted by ibm-fan-con-py
#fan.min.temp has to be less than fan.max.temp
#Default value is 45
fan.min.temp = 45

#Set a maximum temp, in degrees celcius, at which the fan should spin at level 7 speed.
#Only values [1..75] are accepted by ibm-fan-con-py
#Default value is 70
#fan.max.temp has to be greater than fan.min.temp
fan.max.temp = 70

#Fan will automatically jump brackets from 1 to 7 between fan.min.temp and fan.max.temp
#Fan will be set to "disengaged" (max performance) at any temp above fan.max.temp


[control-settings]
#The ACPI watchdog timer will revert the system's fan control to automatic, in case the user-space driver (this Python app - ibm-fan-con-py) crashes.
#The timer is in seconds, and indicates a period of time, after the last input was received from the user-space driver, before the automatic control takes over.
#ibm-fan-con-py will refresh the fan speed level 3 seconds prior to the watchdog.timer.seconds value, to avoid the ACPI watchdog taking over.
#Only values [5..120] are accepted by ibm-fan-con-py
#Default value is 15
watchdog.timer.seconds = 15

#When deciding to throttle down the fan speed, what is the minimum time between levels, before stepping down 1 level.
#The fan speed may increase to a fast speed, very quickly as temperatures increase. (There is no hysteresis for increase).
#The hysteresis value below prevents the fan from slowing down too fast, which might result in annoying fan noises.
#You can set this to 0 to allow fan speed to step down faster.
#The ACPI fan controls may still apply some slower / gradual change in speed, even with a hysteresis of 0.
#Only values [0..60] are accepted by ibm-fan-con-py
#Default value is 10
spin.down.hysteresis.seconds = 10


[log-settings]
#Valid values: CRITICAL, FATAL, ERROR, WARN, INFO, DEBUG
log.level = DEBUG


#See also:
#https://unix.stackexchange.com/questions/677382/why-fan-gets-enabled-again-and-again-after-thinkfan-started-and-ended-once
#https://www.kernel.org/doc/Documentation/admin-guide/laptops/thinkpad-acpi.rst
